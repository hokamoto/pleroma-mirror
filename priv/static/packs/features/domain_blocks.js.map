{"version":3,"sources":["webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/components/domain.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/containers/domain_container.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/domain_blocks/index.js"],"names":["messages","defineMessages","unblockDomain","id","defaultMessage","Account","injectIntl","_this","props","onUnblockDomain","domain","render","_this$props","this","intl","Object","jsx","className","icon_button","active","icon","title","formatMessage","onClick","handleDomainUnblock","ImmutablePureComponent","PropTypes","string","func","isRequired","object","blockDomainConfirm","connect","dispatch","_ref","onBlockDomain","openModal","message","index_es","values","confirm","onConfirm","blockDomain","Domain","heading","Blocks","state","domains","getIn","debounce_default","expandDomainBlocks","leading","componentWillMount","fetchDomainBlocks","shouldUpdateScroll","column","loading_indicator","emptyMessage","column_back_button_slim","scrollable_list","scrollKey","onLoadMore","handleLoadMore","map","domain_container","params","ImmutablePropTypes","orderedSet"],"mappings":"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","file":"features/domain_blocks.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  }\n\n  render () {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock-alt' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Hidden domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, shouldUpdateScroll } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no hidden domains yet.' />;\n\n    return (\n      <Column icon='minus-circle' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}