{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/status/components/detailed_status.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/status/components/action_bar.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/status/index.js"],"names":["DetailedStatus","height","e","button","ctrlKey","metaKey","_this","context","router","preventDefault","history","push","props","status","getIn","stopPropagation","media","startTime","onOpenVideo","onToggleHidden","c","node","_measureHeight","href","target","nodeName","parentNode","window","open","heightJustChanged","_this2","this","measureHeight","scheduleIdleTask","setState","Math","ceil","scrollHeight","onHeightChange","componentDidUpdate","prevProps","prevState","state","render","get","outerStyle","boxSizing","compact","applicationLink","reblogLink","reblogIcon","favouriteLink","size","some","item","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","_components_attachment_list__WEBPACK_IMPORTED_MODULE_11__","video","_video__WEBPACK_IMPORTED_MODULE_16__","preview","src","alt","width","inline","handleOpenVideo","sensitive","_components_media_gallery__WEBPACK_IMPORTED_MODULE_10__","standalone","onOpenMedia","length","_card__WEBPACK_IMPORTED_MODULE_14__","card","className","rel","mastodon_components_icon__WEBPACK_IMPORTED_MODULE_19__","id","react_router_dom__WEBPACK_IMPORTED_MODULE_12__","to","react_intl__WEBPACK_IMPORTED_MODULE_13__","value","onClick","handleModalLink","style","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","ref","setRef","classNames","handleAccountClick","_components_avatar__WEBPACK_IMPORTED_MODULE_7__","account","_components_display_name__WEBPACK_IMPORTED_MODULE_8__","localDomain","domain","_components_status_content__WEBPACK_IMPORTED_MODULE_9__","expanded","onExpandedToggle","handleExpandedToggle","Date","hour12","year","month","day","hour","minute","ImmutablePureComponent","PropTypes","object","ImmutablePropTypes","map","isRequired","func","bool","string","messages","defineMessages","delete","defaultMessage","redraft","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","ActionBar","injectIntl","onReply","onReblog","onFavourite","onDelete","onDirect","onMention","onMute","onMuteConversation","onBlock","onReport","onPin","navigator","text","url","onEmbed","_this$props","intl","publicStatus","includes","mutingConversation","menu","formatMessage","action","handleEmbed","me","handlePinClick","handleReblogClick","handleConversationMuteClick","handleDeleteClick","handleRedraftClick","name","handleMentionClick","handleDirectClick","handleMuteClick","handleBlockClick","handleReport","isStaff","replyIcon","shareButton","jsx","icon_button","title","icon","handleShare","reblog_disabled","handleReplyClick","disabled","active","animate","handleFavouriteClick","dropdown_menu_container","items","direction","React","PureComponent","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","blockConfirm","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","Status","connect","getStatus","makeGetStatus","params","statusId","ancestorsIds","Immutable","List","descendantsIds","withMutations","mutable","unshift","ids","shift","replies","reverse","forEach","askReplyConfirmation","trim","fullscreen","dispatch","unfavourite","openModal","message","confirm","onConfirm","replyCompose","unreblog","shiftKey","boostModal","handleModalReblog","withRedraft","_this$props2","deleteModal","deleteStatus","directCompose","mentionCompose","index","time","initMuteModal","unmuteStatus","muteStatus","revealStatus","hideStatus","_this$props3","statusIds","concat","toJS","_this$props4","index_es","values","blockAccount","initReport","handleMoveUp","handleMoveDown","handleToggleHidden","_this$props5","_selectChild","indexOf","_this$props6","isFullscreen","componentWillMount","fetchStatus","componentDidMount","attachFullscreenListener","onFullScreenChange","componentWillReceiveProps","nextProps","_scrolledIntoView","element","querySelectorAll","focus","renderChildren","list","status_container","onMoveUp","onMoveDown","contextType","_this$props7","requestAnimationFrame","scrollIntoView","componentWillUnmount","detachFullscreenListener","ancestors","descendants","_this$props8","shouldUpdateScroll","column","column_back_button","missing_indicator","handlers","moveUp","handleHotkeyMoveUp","moveDown","handleHotkeyMoveDown","handleHotkeyReply","handleHotkeyFavourite","boost","handleHotkeyBoost","handleHotkeyMention","openProfile","handleHotkeyOpenProfile","toggleHidden","handleHotkeyToggleHidden","label","column_header","showBackButton","extraButton","aria-label","handleToggleAll","aria-pressed","react_router_scroll_4_es","scrollKey","react_default","react_hotkeys_index_es","tabIndex","textForScreenReader","detailed_status","handleOpenMedia","action_bar_ActionBar","handlePin"],"mappings":"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","file":"features/status.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport StatusContent from '../../../components/status_content';\nimport MediaGallery from '../../../components/media_gallery';\nimport AttachmentList from '../../../components/attachment_list';\nimport { Link } from 'react-router-dom';\nimport { FormattedDate, FormattedNumber } from 'react-intl';\nimport Card from './card';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Video from '../../video';\nimport scheduleIdleTask from '../../ui/util/schedule_idle_task';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\n\nexport default class DetailedStatus extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    onOpenMedia: PropTypes.func.isRequired,\n    onOpenVideo: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    measureHeight: PropTypes.bool,\n    onHeightChange: PropTypes.func,\n    domain: PropTypes.string.isRequired,\n    compact: PropTypes.bool,\n  };\n\n  state = {\n    height: null,\n  };\n\n  handleAccountClick = (e) => {\n    if (e.button === 0 && !(e.ctrlKey || e.metaKey) && this.context.router) {\n      e.preventDefault();\n      this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n    }\n\n    e.stopPropagation();\n  }\n\n  handleOpenVideo = (media, startTime) => {\n    this.props.onOpenVideo(media, startTime);\n  }\n\n  handleExpandedToggle = () => {\n    this.props.onToggleHidden(this.props.status);\n  }\n\n  _measureHeight (heightJustChanged) {\n    if (this.props.measureHeight && this.node) {\n      scheduleIdleTask(() => this.node && this.setState({ height: Math.ceil(this.node.scrollHeight) + 1 }));\n\n      if (this.props.onHeightChange && heightJustChanged) {\n        this.props.onHeightChange();\n      }\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n    this._measureHeight();\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    this._measureHeight(prevState.height !== this.state.height);\n  }\n\n  handleModalLink = e => {\n    e.preventDefault();\n\n    let href;\n\n    if (e.target.nodeName !== 'A') {\n      href = e.target.parentNode.href;\n    } else {\n      href = e.target.href;\n    }\n\n    window.open(href, 'mastodon-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n  }\n\n  render () {\n    const status = this.props.status.get('reblog') ? this.props.status.get('reblog') : this.props.status;\n    const outerStyle = { boxSizing: 'border-box' };\n    const { compact } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    let media           = '';\n    let applicationLink = '';\n    let reblogLink = '';\n    let reblogIcon = 'retweet';\n    let favouriteLink = '';\n\n    if (this.props.measureHeight) {\n      outerStyle.height = `${this.state.height}px`;\n    }\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.get('media_attachments').some(item => item.get('type') === 'unknown')) {\n        media = <AttachmentList media={status.get('media_attachments')} />;\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const video = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Video\n            preview={video.get('preview_url')}\n            src={video.get('url')}\n            alt={video.get('description')}\n            width={300}\n            height={150}\n            inline\n            onOpenVideo={this.handleOpenVideo}\n            sensitive={status.get('sensitive')}\n          />\n        );\n      } else {\n        media = (\n          <MediaGallery\n            standalone\n            sensitive={status.get('sensitive')}\n            media={status.get('media_attachments')}\n            height={300}\n            onOpenMedia={this.props.onOpenMedia}\n          />\n        );\n      }\n    } else if (status.get('spoiler_text').length === 0) {\n      media = <Card onOpenMedia={this.props.onOpenMedia} card={status.get('card', null)} />;\n    }\n\n    if (status.get('application')) {\n      applicationLink = <span> · <a className='detailed-status__application' href={status.getIn(['application', 'website'])} target='_blank' rel='noopener'>{status.getIn(['application', 'name'])}</a></span>;\n    }\n\n    if (status.get('visibility') === 'direct') {\n      reblogIcon = 'envelope';\n    } else if (status.get('visibility') === 'private') {\n      reblogIcon = 'lock';\n    }\n\n    if (status.get('visibility') === 'private') {\n      reblogLink = <Icon id={reblogIcon} />;\n    } else if (this.context.router) {\n      reblogLink = (\n        <Link to={`/statuses/${status.get('id')}/reblogs`} className='detailed-status__link'>\n          <Icon id={reblogIcon} />\n          <span className='detailed-status__reblogs'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      reblogLink = (\n        <a href={`/interact/${status.get('id')}?type=reblog`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id={reblogIcon} />\n          <span className='detailed-status__reblogs'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    if (this.context.router) {\n      favouriteLink = (\n        <Link to={`/statuses/${status.get('id')}/favourites`} className='detailed-status__link'>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <FormattedNumber value={status.get('favourites_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      favouriteLink = (\n        <a href={`/interact/${status.get('id')}?type=favourite`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <FormattedNumber value={status.get('favourites_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    return (\n      <div style={outerStyle}>\n        <div ref={this.setRef} className={classNames('detailed-status', { compact })}>\n          <a href={status.getIn(['account', 'url'])} onClick={this.handleAccountClick} className='detailed-status__display-name'>\n            <div className='detailed-status__display-avatar'><Avatar account={status.get('account')} size={48} /></div>\n            <DisplayName account={status.get('account')} localDomain={this.props.domain} />\n          </a>\n\n          <StatusContent status={status} expanded={!status.get('hidden')} onExpandedToggle={this.handleExpandedToggle} />\n\n          {media}\n\n          <div className='detailed-status__meta'>\n            <a className='detailed-status__datetime' href={status.get('url')} target='_blank' rel='noopener'>\n              <FormattedDate value={new Date(status.get('created_at'))} hour12={false} year='numeric' month='short' day='2-digit' hour='2-digit' minute='2-digit' />\n            </a>{applicationLink} · {reblogLink} · {favouriteLink}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, isStaff } from '../../../initial_state';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost to original audience' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n});\n\nexport default @injectIntl\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onBlock: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleReplyClick = () => {\n    this.props.onReply(this.props.status);\n  }\n\n  handleReblogClick = (e) => {\n    this.props.onReblog(this.props.status, e);\n  }\n\n  handleFavouriteClick = () => {\n    this.props.onFavourite(this.props.status);\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    this.props.onMute(this.props.status.get('account'));\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleBlockClick = () => {\n    this.props.onBlock(this.props.status.get('account'));\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  render () {\n    const { status, intl } = this.props;\n\n    const publicStatus = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n\n    let menu = [];\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n      menu.push(null);\n    }\n\n    if (me === status.getIn(['account', 'id'])) {\n      if (publicStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n      } else {\n        if (status.get('visibility') === 'private') {\n          menu.push({ text: intl.formatMessage(status.get('reblogged') ? messages.cancel_reblog_private : messages.reblog_private), action: this.handleReblogClick });\n        }\n      }\n\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: status.getIn(['account', 'username']) }), action: this.handleDirectClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.mute, { name: status.getIn(['account', 'username']) }), action: this.handleMuteClick });\n      menu.push({ text: intl.formatMessage(messages.block, { name: status.getIn(['account', 'username']) }), action: this.handleBlockClick });\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n        menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n      }\n    }\n\n    const shareButton = ('share' in navigator) && status.get('visibility') === 'public' && (\n      <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    let reblogIcon = 'retweet';\n    if (status.get('visibility') === 'direct') reblogIcon = 'envelope';\n    else if (status.get('visibility') === 'private') reblogIcon = 'lock';\n\n    let reblog_disabled = (status.get('visibility') === 'direct' || status.get('visibility') === 'private');\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} /></div>\n        <div className='detailed-status__button'><IconButton disabled={reblog_disabled} active={status.get('reblogged')} title={reblog_disabled ? intl.formatMessage(messages.cannot_reblog) : intl.formatMessage(messages.reblog)} icon={reblogIcon} onClick={this.handleReblogClick} /></div>\n        <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} /></div>\n        {shareButton}\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' items={menu} direction='left' title='More' />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  reblog,\n  unreblog,\n  pin,\n  unpin,\n} from '../../actions/interactions';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport { blockAccount } from '../../actions/accounts';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../actions/statuses';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus } from '../../selectors';\nimport { ScrollContainer } from 'react-router-scroll-4';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  blockConfirm: { id: 'confirmations.block.confirm', defaultMessage: 'Block' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, { id: props.params.statusId });\n    let ancestorsIds = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds = ancestorsIds.withMutations(mutable => {\n        let id = status.get('in_reply_to_id');\n\n        while (id) {\n          mutable.unshift(id);\n          id = state.getIn(['contexts', 'inReplyTos', id]);\n        }\n      });\n\n      descendantsIds = descendantsIds.withMutations(mutable => {\n        const ids = [status.get('id')];\n\n        while (ids.length > 0) {\n          let id        = ids.shift();\n          const replies = state.getIn(['contexts', 'replies', id]);\n\n          if (status.get('id') !== id) {\n            mutable.push(id);\n          }\n\n          if (replies) {\n            replies.reverse().forEach(reply => {\n              ids.unshift(reply);\n            });\n          }\n        }\n      });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n  };\n\n  state = {\n    fullscreen: false,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidMount () {\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n  }\n\n  handleFavouriteClick = (status) => {\n    if (status.get('favourited')) {\n      this.props.dispatch(unfavourite(status));\n    } else {\n      this.props.dispatch(favourite(status));\n    }\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  }\n\n  handleReplyClick = (status) => {\n    let { askReplyConfirmation, dispatch, intl } = this.props;\n    if (askReplyConfirmation) {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.replyMessage),\n        confirm: intl.formatMessage(messages.replyConfirm),\n        onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n      }));\n    } else {\n      dispatch(replyCompose(status, this.context.router.history));\n    }\n  }\n\n  handleModalReblog = (status) => {\n    this.props.dispatch(reblog(status));\n  }\n\n  handleReblogClick = (status, e) => {\n    if (status.get('reblogged')) {\n      this.props.dispatch(unreblog(status));\n    } else {\n      if ((e && e.shiftKey) || !boostModal) {\n        this.handleModalReblog(status);\n      } else {\n        this.props.dispatch(openModal('BOOST', { status, onReblog: this.handleModalReblog }));\n      }\n    }\n  }\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  }\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  }\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  }\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { media, index }));\n  }\n\n  handleOpenVideo = (media, time) => {\n    this.props.dispatch(openModal('VIDEO', { media, time }));\n  }\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  }\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  }\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  }\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  }\n\n  handleBlockClick = (account) => {\n    const { dispatch, intl } = this.props;\n\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.block.message' defaultMessage='Are you sure you want to block {name}?' values={{ name: <strong>@{account.get('acct')}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockConfirm),\n      onConfirm: () => dispatch(blockAccount(account.get('id'))),\n    }));\n  }\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  }\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  }\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  }\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  }\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  }\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  }\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  }\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  }\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index);\n      } else {\n        this._selectChild(index - 1);\n      }\n    }\n  }\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2);\n      } else {\n        this._selectChild(index + 1);\n      }\n    }\n  }\n\n  _selectChild (index) {\n    const element = this.node.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      element.focus();\n    }\n  }\n\n  renderChildren (list) {\n    return list.map(id => (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    ));\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidUpdate () {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    const { status, ancestorsIds } = this.props;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount () {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  }\n\n  render () {\n    let ancestors, descendants;\n    const { shouldUpdateScroll, status, ancestorsIds, descendantsIds, intl, domain } = this.props;\n    const { fullscreen } = this.state;\n\n    if (status === null) {\n      return (\n        <Column>\n          <ColumnBackButton />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n\n    return (\n      <Column label={intl.formatMessage(messages.detailedStatus)}>\n        <ColumnHeader\n          showBackButton\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} onClick={this.handleToggleAll} aria-pressed={status.get('hidden') ? 'false' : 'true'}><Icon id={status.get('hidden') ? 'eye-slash' : 'eye'} /></button>\n          )}\n        />\n\n        <ScrollContainer scrollKey='thread' shouldUpdateScroll={shouldUpdateScroll}>\n          <div className={classNames('scrollable', { fullscreen })} ref={this.setRef}>\n            {ancestors}\n\n            <HotKeys handlers={handlers}>\n              <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false, !status.get('hidden'))}>\n                <DetailedStatus\n                  status={status}\n                  onOpenVideo={this.handleOpenVideo}\n                  onOpenMedia={this.handleOpenMedia}\n                  onToggleHidden={this.handleToggleHidden}\n                  domain={domain}\n                />\n\n                <ActionBar\n                  status={status}\n                  onReply={this.handleReplyClick}\n                  onFavourite={this.handleFavouriteClick}\n                  onReblog={this.handleReblogClick}\n                  onDelete={this.handleDeleteClick}\n                  onDirect={this.handleDirectClick}\n                  onMention={this.handleMentionClick}\n                  onMute={this.handleMuteClick}\n                  onMuteConversation={this.handleConversationMuteClick}\n                  onBlock={this.handleBlockClick}\n                  onReport={this.handleReport}\n                  onPin={this.handlePin}\n                  onEmbed={this.handleEmbed}\n                />\n              </div>\n            </HotKeys>\n\n            {descendants}\n          </div>\n        </ScrollContainer>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}