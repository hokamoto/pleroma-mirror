{"version":3,"sources":["webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/components/notification.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/containers/notification_container.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/components/clear_column_button.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/components/column_settings.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/components/filter_bar.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/mastodon/features/notifications/index.js"],"names":["notificationForScreenReader","intl","message","timestamp","output","push","formatDate","hour","minute","month","day","join","Notification","injectIntl","_this$props","_this","props","notification","onMoveUp","get","_this$props2","onMoveDown","context","router","history","handleOpenProfile","getIn","e","preventDefault","_this$props3","onMention","getHandlers","moveUp","this","handleMoveUp","moveDown","handleMoveDown","open","handleOpen","openProfile","mention","handleMention","reply","renderFollow","account","link","Object","jsx","react_hotkeys_index_es","handlers","className","tabIndex","aria-label","formatMessage","id","defaultMessage","name","title","index_es","values","account_container","withNote","hidden","renderMention","status_container","withDismiss","contextType","renderFavourite","muted","renderReblog","render","displayNameHtml","__html","permalink","href","to","dangerouslySetInnerHTML","ImmutablePureComponent","PropTypes","object","ImmutablePropTypes","map","isRequired","bool","func","connect","getNotification","makeGetNotification","state","accountId","dispatch","mentionCompose","ClearColumnButton","onClick","React","PureComponent","ColumnSettings","path","checked","onChange","concat","settings","pushSettings","onClear","filterShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","pushStr","clear_column_button_ClearColumnButton","role","aria-labelledby","setting_toggle","prefix","settingPath","label","onPushChange","messages","defineMessages","clearMessage","clearConfirm","_ref","changePushNotifications","slice","changeSetting","setFilter","openModal","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","boosts","follows","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","getNotifications","createSelector","ImmutableList","filter","item","keys","showFilterBar","allowedType","excludedTypes","notifications","filterNot","includes","Notifications","isLoading","isUnread","hasMore","maxId","expandNotifications","debounce_default","last","leading","scrollTopNotifications","columnId","removeColumn","addColumn","dir","moveColumn","column","scrollTop","c","elementIndex","findIndex","_selectChild","componentWillUnmount","handleLoadOlder","cancel","handleScrollToTop","handleScroll","index","element","node","querySelector","focus","_this2","shouldUpdateScroll","multiColumn","pinned","emptyMessage","scrollableContent","filterBarContainer","filter_bar_container","size","load_gap","disabled","handleLoadGap","notification_container","scrollContainer","scrollable_list","scrollKey","trackScroll","showLoading","onLoadMore","onScrollToTop","onScroll","react_default","a","createElement","ref","setColumnRef","column_header","icon","active","onPin","handlePin","onMove","handleMove","handleHeaderClick","column_settings_container"],"mappings":"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","file":"features/notifications.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusContainer from '../../../containers/status_container';\nimport AccountContainer from '../../../containers/account_container';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport Permalink from '../../../components/permalink';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nexport default @injectIntl\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/statuses/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/accounts/${notification.getIn(['account', 'id'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  renderFollow (notification, account, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-follow focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow', defaultMessage: '{name} followed you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <i className='fa fa-fw fa-user-plus' />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention (notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n      />\n    );\n  }\n\n  renderFavourite (notification, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-favourite focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.favourite', defaultMessage: '{name} favourited your status' }, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <i className='fa fa-fw fa-star star-icon' />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} favourited your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer id={notification.get('status')} account={notification.get('account')} muted withDismiss hidden={!!this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog (notification, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-reblog focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.reblog', defaultMessage: '{name} boosted your status' }, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <i className='fa fa-fw fa-retweet' />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} boosted your status' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer id={notification.get('status')} account={notification.get('account')} muted withDismiss hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render () {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Permalink className='notification__display-name' href={account.get('url')} title={account.get('acct')} to={`/accounts/${account.get('id')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    }\n\n    return null;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetNotification } from '../../../selectors';\nimport Notification from '../components/notification';\nimport { mentionCompose } from '../../../actions/compose';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n\n  const mapStateToProps = (state, props) => ({\n    notification: getNotification(state, props.notification, props.accountId),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nexport default class ClearColumnButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><i className='fa fa-eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport SettingToggle from './setting_toggle';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  }\n\n  render () {\n    const { settings, pushSettings, onChange, onClear } = this.props;\n\n    const filterShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show' defaultMessage='Show' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr  = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr   = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr  = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favourites:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from '../../../actions/settings';\nimport { setFilter } from '../../../actions/notifications';\nimport { clearNotifications } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      dispatch(changePushNotifications(path.slice(1), checked));\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favourites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <i className='fa fa-fw fa-at' />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <i className='fa fa-fw fa-star' />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <i className='fa fa-fw fa-retweet' />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <i className='fa fa-fw fa-user-plus' />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandNotifications, scrollTopNotifications } from '../../actions/notifications';\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  state => ImmutableList(state.getIn(['settings', 'notifications', 'shows']).filter(item => !item).keys()),\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item !== null && allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], true),\n  isUnread: state.getIn(['notifications', 'unread']) > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  setColumnRef = c => {\n    this.column = c;\n  }\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex);\n  }\n\n  _selectChild (index) {\n    const element = this.column.node.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      element.focus();\n    }\n  }\n\n  render () {\n    const { intl, notifications, shouldUpdateScroll, isLoading, isUnread, columnId, multiColumn, hasMore, showFilterBar } = this.props;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. Interact with others to start the conversation.\" />;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = showFilterBar\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    const scrollContainer = (\n      <ScrollableList\n        scrollKey={`notifications-${columnId}`}\n        trackScroll={!pinned}\n        isLoading={isLoading}\n        showLoading={isLoading && notifications.size === 0}\n        hasMore={hasMore}\n        emptyMessage={emptyMessage}\n        onLoadMore={this.handleLoadOlder}\n        onScrollToTop={this.handleScrollToTop}\n        onScroll={this.handleScroll}\n        shouldUpdateScroll={shouldUpdateScroll}\n      >\n        {scrollableContent}\n      </ScrollableList>\n    );\n\n    return (\n      <Column ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n        {filterBarContainer}\n        {scrollContainer}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}