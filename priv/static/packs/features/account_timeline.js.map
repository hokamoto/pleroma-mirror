{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/account_timeline/index.js"],"names":["AccountTimeline","connect","state","_ref","accountId","params","_ref$withReplies","withReplies","path","statusIds","getIn","ImmutableList","featuredStatusIds","isLoading","hasMore","maxId","_this","props","dispatch","expandAccountTimeline","componentWillMount","_this$props","this","fetchAccount","expandAccountFeaturedTimeline","componentWillReceiveProps","nextProps","render","_this$props2","shouldUpdateScroll","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","_ui_components_column__WEBPACK_IMPORTED_MODULE_12__","_components_loading_indicator__WEBPACK_IMPORTED_MODULE_11__","_components_column_back_button__WEBPACK_IMPORTED_MODULE_14__","_components_status_list__WEBPACK_IMPORTED_MODULE_10__","prepend","_containers_header_container__WEBPACK_IMPORTED_MODULE_13__","alwaysPrepend","scrollKey","onLoadMore","handleLoadMore","emptyMessage","react_intl__WEBPACK_IMPORTED_MODULE_17__","id","defaultMessage","ImmutablePureComponent","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"iTA2BMA,EADUC,kBAXQ,SAACC,EAADC,GAA2D,IAAvCC,EAAuCD,EAAjDE,OAAUD,UAAuCE,EAAAH,EAA1BI,mBAA0B,IAAAD,KAC3EE,EAAOD,EAAiBH,EAAN,gBAAiCA,EAEzD,MAAO,CACLK,UAAWP,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,SAAUG,kBAClEC,kBAAmBL,EAAcI,iBAAkBT,EAAMQ,MAAM,CAAC,YAAD,WAAyBN,EAAzB,UAA6C,SAAUO,kBACtHE,UAAWX,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,cACxDM,QAAWZ,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,gOAsCzC,SAAAO,GACfC,EAAKC,MAAMC,SAASC,YAAsBH,EAAKC,MAAMZ,OAAOD,UAAW,CAAEW,QAAOR,YAAaS,EAAKC,MAAMV,+DArB1Ga,mBAAA,WAAsB,IAAAC,EAC2BC,KAAKL,MAAlCb,EADEiB,EACZhB,OAAUD,UAAaG,EADXc,EACWd,YAE/Be,KAAKL,MAAMC,SAASK,YAAanB,IAC5BG,GACHe,KAAKL,MAAMC,SAASM,YAA8BpB,IAEpDkB,KAAKL,MAAMC,SAASC,YAAsBf,EAAW,CAAEG,oBAGzDkB,0BAAA,SAA2BC,IACpBA,EAAUrB,OAAOD,YAAckB,KAAKL,MAAMZ,OAAOD,WAAasB,EAAUrB,OAAOD,WAAcsB,EAAUnB,cAAgBe,KAAKL,MAAMV,eACrIe,KAAKL,MAAMC,SAASK,YAAaG,EAAUrB,OAAOD,YAC7CsB,EAAUnB,aACbe,KAAKL,MAAMC,SAASM,YAA8BE,EAAUrB,OAAOD,YAErEkB,KAAKL,MAAMC,SAASC,YAAsBO,EAAUrB,OAAOD,UAAW,CAAEG,YAAamB,EAAUrB,OAAOE,mBAQ1GoB,OAAA,WAAU,IAAAC,EACyEN,KAAKL,MAA9EY,EADAD,EACAC,mBAAoBpB,EADpBmB,EACoBnB,UAAWG,EAD/BgB,EAC+BhB,kBAAmBC,EADlDe,EACkDf,UAAWC,EAD7Dc,EAC6Dd,QAErE,OAAKL,GAAaI,EAEdiB,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,UACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,KAMJH,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,UACEF,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,IAEAJ,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAD,CACEC,QAASN,OAAAC,EAAA,EAAAD,CAACO,EAAA,EAAD,CAAiBjC,UAAWkB,KAAKL,MAAMZ,OAAOD,YACvDkC,eAAa,EACbC,UAAU,mBACV9B,UAAWA,EACXG,kBAAmBA,EACnBC,UAAWA,EACXC,QAASA,EACT0B,WAAYlB,KAAKmB,eACjBZ,mBAAoBA,EACpBa,aAAcZ,OAAAC,EAAA,EAAAD,CAACa,EAAA,EAAD,CAAkBC,GAAG,gCAAgCC,eAAe,0BA9D9DC,+BAET,CACjBzC,OAAQ0C,IAAUC,OAAOC,WACzB/B,SAAU6B,IAAUG,KAAKD,WACzBpB,mBAAoBkB,IAAUG,KAC9BzC,UAAW0C,IAAmBC,KAC9BxC,kBAAmBuC,IAAmBC,KACtCvC,UAAWkC,IAAUM,KACrBvC,QAASiC,IAAUM,KACnB9C,YAAawC,IAAUM","file":"features/account_timeline.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\n\nconst mapStateToProps = (state, { params: { accountId }, withReplies = false }) => {\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], ImmutableList()),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], ImmutableList()),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore:   state.getIn(['timelines', `account:${path}`, 'hasMore']),\n  };\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    const { params: { accountId }, withReplies } = this.props;\n\n    this.props.dispatch(fetchAccount(accountId));\n    if (!withReplies) {\n      this.props.dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n    this.props.dispatch(expandAccountTimeline(accountId, { withReplies }));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      this.props.dispatch(fetchAccount(nextProps.params.accountId));\n      if (!nextProps.withReplies) {\n        this.props.dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n      this.props.dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.params.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  render () {\n    const { shouldUpdateScroll, statusIds, featuredStatusIds, isLoading, hasMore } = this.props;\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <ColumnBackButton />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.params.accountId} />}\n          alwaysPrepend\n          scrollKey='account_timeline'\n          statusIds={statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={<FormattedMessage id='empty_column.account_timeline' defaultMessage='No toots here!' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}