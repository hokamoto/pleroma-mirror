{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/getting_started/index.js"],"names":["messages","defineMessages","_defineMessages","heading","id","defaultMessage","home_timeline","notifications","public_timeline","navigation_subheading","settings_subheading","community_timeline","direct","bookmarks","preferences","settings","follow_requests","sign_out","lists","keyboard_shortcuts","lists_subheading","misc","menu","badgeDisplay","number","limit","GettingStarted","connect","getOrderedLists","createSelector","state","get","toList","filter","item","sort","a","b","localeCompare","myAccount","getIn","me","columns","unreadFollowRequests","ImmutableList","size","unreadNotifications","customPanelEnabled","customPanel","dispatch","fetchFollowRequests","fetchLists","openSettings","openModal","fetchPanel","fetchPleromaConfig","injectIntl","componentWillMount","this","props","componentDidMount","_this$props","render","_this$props2","intl","multiColumn","navItems","listItems","find","push","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","flavours_glitch_features_ui_components_column_link__WEBPACK_IMPORTED_MODULE_5__","icon","text","formatMessage","to","badge","concat","map","list","Number","toString","staticContent","dangerouslySetInnerHTML","__html","style","marginLeft","marginRight","href","rel","target","react_intl__WEBPACK_IMPORTED_MODULE_7__","flavours_glitch_features_ui_components_column__WEBPACK_IMPORTED_MODULE_4__","name","label","hideHeadingOnMobile","className","flavours_glitch_features_ui_components_column_subheading__WEBPACK_IMPORTED_MODULE_6__","undefined","preferencesLink","onClick","signOutLink","method","values","mastofe","glitchsoc","mastodon","pleroma","ImmutablePureComponent","PropTypes","object","isRequired","ImmutablePropTypes","bool","func","string"],"mappings":"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","file":"flavours/glitch/async/getting_started.js","sourcesContent":["import React from 'react';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport ColumnLink from 'flavours/glitch/features/ui/components/column_link';\nimport ColumnSubheading from 'flavours/glitch/features/ui/components/column_subheading';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { me, invitesEnabled, version } from 'flavours/glitch/util/initial_state';\nimport { fetchFollowRequests } from 'flavours/glitch/actions/accounts';\nimport { List as ImmutableList } from 'immutable';\nimport { createSelector } from 'reselect';\nimport { fetchLists } from 'flavours/glitch/actions/lists';\nimport { preferencesLink, profileLink, signOutLink } from 'flavours/glitch/util/backend_links';\nimport { fetchPanel, fetchPleromaConfig } from 'mastodon/actions/pleroma';\n\nconst messages = defineMessages({\n  heading: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n  home_timeline: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n  notifications: { id: 'tabs_bar.notifications', defaultMessage: 'Notifications' },\n  public_timeline: { id: 'navigation_bar.public_timeline', defaultMessage: 'Federated timeline' },\n  navigation_subheading: { id: 'column_subheading.navigation', defaultMessage: 'Navigation' },\n  settings_subheading: { id: 'column_subheading.settings', defaultMessage: 'Settings' },\n  community_timeline: { id: 'navigation_bar.community_timeline', defaultMessage: 'Local timeline' },\n  direct: { id: 'navigation_bar.direct', defaultMessage: 'Direct messages' },\n  bookmarks: { id: 'navigation_bar.bookmarks', defaultMessage: 'Bookmarks' },\n  preferences: { id: 'navigation_bar.preferences', defaultMessage: 'Preferences' },\n  settings: { id: 'navigation_bar.app_settings', defaultMessage: 'App settings' },\n  follow_requests: { id: 'navigation_bar.follow_requests', defaultMessage: 'Follow requests' },\n  sign_out: { id: 'navigation_bar.logout', defaultMessage: 'Logout' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  keyboard_shortcuts: { id: 'navigation_bar.keyboard_shortcuts', defaultMessage: 'Keyboard shortcuts' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  lists_subheading: { id: 'column_subheading.lists', defaultMessage: 'Lists' },\n  misc: { id: 'navigation_bar.misc', defaultMessage: 'Misc' },\n  menu: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n});\n\nconst makeMapStateToProps = () => {\n  const getOrderedLists = createSelector([state => state.get('lists')], lists => {\n    if (!lists) {\n      return lists;\n    }\n\n    return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n  });\n\n  const mapStateToProps = state => ({\n    lists: getOrderedLists(state),\n    myAccount: state.getIn(['accounts', me]),\n    columns: state.getIn(['settings', 'columns']),\n    unreadFollowRequests: state.getIn(['user_lists', 'follow_requests', 'items'], ImmutableList()).size,\n    unreadNotifications: state.getIn(['notifications', 'unread']),\n    customPanelEnabled: state.getIn(['custom_panel', 'enabled']),\n    customPanel: state.getIn(['custom_panel', 'panel']),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFollowRequests: () => dispatch(fetchFollowRequests()),\n  fetchLists: () => dispatch(fetchLists()),\n  openSettings: () => dispatch(openModal('SETTINGS', {})),\n  fetchPanel: () => dispatch(fetchPanel()),\n  fetchPleromaConfig: () => dispatch(fetchPleromaConfig()),\n});\n\nconst badgeDisplay = (number, limit) => {\n  if (number === 0) {\n    return undefined;\n  } else if (limit && number >= limit) {\n    return `${limit}+`;\n  } else {\n    return number;\n  }\n};\n\n@connect(makeMapStateToProps, mapDispatchToProps)\n@injectIntl\nexport default class GettingStarted extends ImmutablePureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    myAccount: ImmutablePropTypes.map.isRequired,\n    columns: ImmutablePropTypes.list,\n    multiColumn: PropTypes.bool,\n    fetchFollowRequests: PropTypes.func.isRequired,\n    unreadFollowRequests: PropTypes.number,\n    unreadNotifications: PropTypes.number,\n    lists: ImmutablePropTypes.list,\n    fetchLists: PropTypes.func.isRequired,\n    openSettings: PropTypes.func.isRequired,\n    fetchPanel: PropTypes.func.isRequired,\n    fetchPleromaConfig: PropTypes.func.isRequired,\n    customPanelEnabled: PropTypes.bool,\n    customPanel: PropTypes.string.isRequired,\n  };\n\n  componentWillMount () {\n    this.props.fetchLists();\n  }\n\n  componentDidMount () {\n    const { myAccount, fetchFollowRequests, fetchPleromaConfig, fetchPanel } = this.props;\n\n    if (myAccount.get('locked')) {\n      fetchFollowRequests();\n    }\n\n    fetchPleromaConfig();\n    fetchPanel();\n  }\n\n  render () {\n    const { intl, myAccount, columns, multiColumn, unreadFollowRequests, unreadNotifications, lists, openSettings, customPanelEnabled, customPanel } = this.props;\n\n    const navItems = [];\n    let listItems = [];\n\n    if (multiColumn) {\n      if (!columns.find(item => item.get('id') === 'HOME')) {\n        navItems.push(<ColumnLink key='0' icon='home' text={intl.formatMessage(messages.home_timeline)} to='/timelines/home' />);\n      }\n\n      if (!columns.find(item => item.get('id') === 'NOTIFICATIONS')) {\n        navItems.push(<ColumnLink key='1' icon='bell' text={intl.formatMessage(messages.notifications)} badge={badgeDisplay(unreadNotifications)} to='/notifications' />);\n      }\n\n      if (!columns.find(item => item.get('id') === 'COMMUNITY')) {\n        navItems.push(<ColumnLink key='2' icon='users' text={intl.formatMessage(messages.community_timeline)} to='/timelines/public/local' />);\n      }\n\n      if (!columns.find(item => item.get('id') === 'PUBLIC')) {\n        navItems.push(<ColumnLink key='3' icon='globe' text={intl.formatMessage(messages.public_timeline)} to='/timelines/public' />);\n      }\n    }\n\n    if (!multiColumn || !columns.find(item => item.get('id') === 'DIRECT')) {\n      navItems.push(<ColumnLink key='4' icon='envelope' text={intl.formatMessage(messages.direct)} to='/timelines/direct' />);\n    }\n\n    if (!multiColumn || !columns.find(item => item.get('id') === 'BOOKMARKS')) {\n      navItems.push(<ColumnLink key='5' icon='bookmark' text={intl.formatMessage(messages.bookmarks)} to='/bookmarks' />);\n    }\n\n    if (myAccount.get('locked')) {\n      navItems.push(<ColumnLink key='6' icon='users' text={intl.formatMessage(messages.follow_requests)} badge={badgeDisplay(unreadFollowRequests, 40)} to='/follow_requests' />);\n    }\n\n    navItems.push(<ColumnLink key='7' icon='ellipsis-h' text={intl.formatMessage(messages.misc)} to='/getting-started-misc' />);\n\n    listItems = listItems.concat([\n      <div key='8'>\n        <ColumnLink key='9' icon='bars' text={intl.formatMessage(messages.lists)} to='/lists' />\n        {lists.map(list =>\n          <ColumnLink key={(9 + Number(list.get('id'))).toString()} to={`/timelines/list/${list.get('id')}`} icon='list-ul' text={list.get('title')} />\n        )}\n      </div>,\n    ]);\n\n    const dot = ' • ';\n    const staticContent = (customPanelEnabled ? <div dangerouslySetInnerHTML={{__html: customPanel}} style={{marginLeft: -12, marginRight: -12}} /> :\n      <p>\n        <a href='https://github.com/tootsuite/documentation/blob/master/Using-Mastodon/FAQ.md' rel='noopener' target='_blank'><FormattedMessage id='getting_started.faq' defaultMessage='FAQ' /></a>\n        {dot}\n        <a href='https://github.com/tootsuite/documentation/blob/master/Using-Mastodon/User-guide.md' rel='noopener' target='_blank'><FormattedMessage id='getting_started.userguide' defaultMessage='User Guide' /></a>\n        {dot}\n        <a href='https://github.com/tootsuite/documentation/blob/master/Using-Mastodon/Apps.md' rel='noopener' target='_blank'><FormattedMessage id='getting_started.appsshort' defaultMessage='Apps' /></a>\n        {dot}\n        <a href='https://pleroma.social'><FormattedMessage id='getting_started.pleroma' defaultMessage='Pleroma' /></a>\n      </p>\n    );\n\n    return (\n      <Column name='getting-started' icon='asterisk' heading={intl.formatMessage(messages.heading)} label={intl.formatMessage(messages.menu)} hideHeadingOnMobile>\n        <div className='getting-started__wrapper scrollable'>\n          <ColumnSubheading text={intl.formatMessage(messages.navigation_subheading)} />\n          {navItems}\n          <ColumnSubheading text={intl.formatMessage(messages.lists_subheading)} />\n          {listItems}\n          <ColumnSubheading text={intl.formatMessage(messages.settings_subheading)} />\n          { preferencesLink !== undefined && <ColumnLink icon='cog' text={intl.formatMessage(messages.preferences)} href={preferencesLink} /> }\n          <ColumnLink icon='cogs' text={intl.formatMessage(messages.settings)} onClick={openSettings} />\n          <ColumnLink icon='sign-out' text={intl.formatMessage(messages.sign_out)} href={signOutLink} method='delete' />\n        </div>\n\n        <div className='getting-started getting-started__panel scrollable'>\n          {staticContent}\n        </div>\n\n        <div className='getting-started__footer scrollable'>\n          <p>\n            <FormattedMessage\n              id='getting_started.mastofe_notice'\n              defaultMessage='Mastofe is a libre distribution of the frontend from {glitchsoc}, a friendly fork of {mastodon}. You can contribute or report issues at {mastofe}.'\n              values={{\n                mastofe: <a href='https://git.pleroma.social/pleroma/mastofe' rel='noopener' target='_blank'>Mastofe</a>,\n                glitchsoc: <a href='https://github.com/glitch-soc/mastodon' rel='noopener' target='_blank'>glitch-soc</a>,\n                mastodon: <a href='https://github.com/tootsuite/mastodon' rel='noopener' target='_blank'>Mastodon</a>,\n                pleroma: <a href='https://pleroma.social' rel='noopener' target='_blank'>Pleroma</a>\n              }}\n            />\n          </p>\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}