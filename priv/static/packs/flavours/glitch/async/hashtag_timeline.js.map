{"version":3,"sources":["webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/flavours/glitch/features/hashtag_timeline/components/column_settings.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/flavours/glitch/features/hashtag_timeline/containers/column_settings_container.js","webpack:///app/javascript/seagate/sources/git/hacktivis.me/git/mastofe/app/javascript/flavours/glitch/features/hashtag_timeline/index.js"],"names":["ColumnSettings","injectIntl","open","_this","hasTags","mode","value","props","onChange","state","setState","_this2","this","map","tags","length","includes","settings","getIn","toJSON","modeSelect","Object","jsx","className","modeLabel","Async_default","a","isMulti","autoFocus","settingPath","onSelect","loadOptions","onLoad","classNamePrefix","name","index_es","id","defaultMessage","render","component_default","onToggle","checked","React","PureComponent","connect","_ref","columnId","columns","index","findIndex","c","get","dispatch","_ref2","key","changeColumnParams","api","params","q","then","response","data","hashtags","tag","label","HashtagTimeline","hasUnread","_this$props","removeColumn","addColumn","title","additionalFor","push","values","additional","join","dir","_this$props2","moveColumn","column","scrollTop","maxId","_this$props$params","expandHashtagTimeline","_subscribe","any","all","none","concat","disconnects","connectHashtagStream","status","filter","_unsubscribe","disconnect","componentDidMount","_this$props$params2","componentWillReceiveProps","nextProps","_this$props3","_nextProps$params","isEqual_default","clearTimeline","componentWillUnmount","_this$props4","multiColumn","pinned","react_default","createElement","ref","setRef","column_header","icon","active","onPin","handlePin","onMove","handleMove","onClick","handleHeaderClick","showBackButton","column_settings_container","status_list_container","trackScroll","scrollKey","timelineId","onLoadMore","handleLoadMore","emptyMessage"],"mappings":"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","file":"flavours/glitch/async/hashtag_timeline.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport Toggle from 'react-toggle';\nimport AsyncSelect from 'react-select/lib/Async';\n\n@injectIntl\nexport default class ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onLoad: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    open: this.hasTags(),\n  };\n\n  hasTags () {\n    return ['all', 'any', 'none'].map(mode => this.tags(mode).length > 0).includes(true);\n  }\n\n  tags (mode) {\n    let tags = this.props.settings.getIn(['tags', mode]) || [];\n    if (tags.toJSON) {\n      return tags.toJSON();\n    } else {\n      return tags;\n    }\n  };\n\n  onSelect = (mode) => {\n    return (value) => {\n      this.props.onChange(['tags', mode], value);\n    };\n  };\n\n  onToggle = () => {\n    if (this.state.open && this.hasTags()) {\n      this.props.onChange('tags', {});\n    }\n    this.setState({ open: !this.state.open });\n  };\n\n  modeSelect (mode) {\n    return (\n      <div className='column-settings__section'>\n        {this.modeLabel(mode)}\n        <AsyncSelect\n          isMulti\n          autoFocus\n          value={this.tags(mode)}\n          settings={this.props.settings}\n          settingPath={['tags', mode]}\n          onChange={this.onSelect(mode)}\n          loadOptions={this.props.onLoad}\n          classNamePrefix='column-settings__hashtag-select'\n          name='tags'\n        />\n      </div>\n    );\n  }\n\n  modeLabel (mode) {\n    switch(mode) {\n    case 'any':  return <FormattedMessage id='hashtag.column_settings.tag_mode.any' defaultMessage='Any of these' />;\n    case 'all':  return <FormattedMessage id='hashtag.column_settings.tag_mode.all' defaultMessage='All of these' />;\n    case 'none': return <FormattedMessage id='hashtag.column_settings.tag_mode.none' defaultMessage='None of these' />;\n    }\n    return '';\n  };\n\n  render () {\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <div className='setting-toggle'>\n            <Toggle\n              id='hashtag.column_settings.tag_toggle'\n              onChange={this.onToggle}\n              checked={this.state.open}\n            />\n            <span className='setting-toggle__label'>\n              <FormattedMessage id='hashtag.column_settings.tag_toggle' defaultMessage='Include additional tags in this column' />\n            </span>\n          </div>\n        </div>\n        {this.state.open &&\n          <div className='column-settings__hashtags'>\n            {this.modeSelect('any')}\n            {this.modeSelect('all')}\n            {this.modeSelect('none')}\n          </div>\n        }\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\nimport api from 'flavours/glitch/util/api';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const columns = state.getIn(['settings', 'columns']);\n  const index   = columns.findIndex(c => c.get('uuid') === columnId);\n\n  if (!(columnId && index >= 0)) {\n    return {};\n  }\n\n  return { settings: columns.get(index).get('params') };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => ({\n  onChange (key, value) {\n    dispatch(changeColumnParams(columnId, key, value));\n  },\n\n  onLoad (value) {\n    return api().get('/api/v2/search', { params: { q: value } }).then(response => {\n      return (response.data.hashtags || []).map((tag) => {\n        return { value: tag.name, label: `#${tag.name}` };\n      });\n    });\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { expandHashtagTimeline, clearTimeline } from 'flavours/glitch/actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { FormattedMessage } from 'react-intl';\nimport { connectHashtagStream } from 'flavours/glitch/actions/streaming';\nimport { isEqual } from 'lodash';\n\nconst mapStateToProps = (state, props) => ({\n  hasUnread: state.getIn(['timelines', `hashtag:${props.params.id}`, 'unread']) > 0,\n});\n\n@connect(mapStateToProps)\nexport default class HashtagTimeline extends React.PureComponent {\n\n  disconnects = [];\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HASHTAG', { id: this.props.params.id }));\n    }\n  }\n\n  title = () => {\n    let title = [this.props.params.id];\n    if (this.additionalFor('any')) {\n      title.push(' ', <FormattedMessage id='hashtag.column_header.tag_mode.any'  values={{ additional: this.additionalFor('any') }} defaultMessage='or {additional}' />);\n    }\n    if (this.additionalFor('all')) {\n      title.push(' ', <FormattedMessage id='hashtag.column_header.tag_mode.all'  values={{ additional: this.additionalFor('all') }} defaultMessage='and {additional}' />);\n    }\n    if (this.additionalFor('none')) {\n      title.push(' ', <FormattedMessage id='hashtag.column_header.tag_mode.none' values={{ additional: this.additionalFor('none') }} defaultMessage='without {additional}' />);\n    }\n    return title;\n  }\n\n  additionalFor = (mode) => {\n    const { tags } = this.props.params;\n\n    if (tags && (tags[mode] || []).length > 0) {\n      return tags[mode].map(tag => tag.value).join('/');\n    } else {\n      return '';\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  _subscribe (dispatch, id, tags = {}) {\n    let any  = (tags.any || []).map(tag => tag.value);\n    let all  = (tags.all || []).map(tag => tag.value);\n    let none = (tags.none || []).map(tag => tag.value);\n\n    [id, ...any].map((tag) => {\n      this.disconnects.push(dispatch(connectHashtagStream(id, tag, (status) => {\n        let tags = status.tags.map(tag => tag.name);\n        return all.filter(tag => tags.includes(tag)).length === all.length &&\n               none.filter(tag => tags.includes(tag)).length === 0;\n      })));\n    });\n  }\n\n  _unsubscribe () {\n    this.disconnects.map(disconnect => disconnect());\n    this.disconnects = [];\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id, tags } = this.props.params;\n\n    dispatch(expandHashtagTimeline(id, { tags }));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { dispatch, params } = this.props;\n    const { id, tags } = nextProps.params;\n    if (id !== params.id || !isEqual(tags, params.tags)) {\n      this._unsubscribe();\n      this._subscribe(dispatch, id, tags);\n      this.props.dispatch(clearTimeline(`hashtag:${id}`));\n      this.props.dispatch(expandHashtagTimeline(id, { tags }));\n    }\n  }\n\n  componentWillUnmount () {\n    this._unsubscribe();\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    const { id, tags } = this.props.params;\n    this.props.dispatch(expandHashtagTimeline(id, { maxId, tags }));\n  }\n\n  render () {\n    const { hasUnread, columnId, multiColumn } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n\n    return (\n      <Column ref={this.setRef} name='hashtag' label={`#${id}`}>\n        <ColumnHeader\n          icon='hashtag'\n          active={hasUnread}\n          title={this.title()}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          showBackButton\n        >\n          {columnId && <ColumnSettingsContainer columnId={columnId} />}\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`hashtag_timeline-${columnId}`}\n          timelineId={`hashtag:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.hashtag' defaultMessage='There is nothing in this hashtag yet.' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}