{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/lists/index.js"],"names":["messages","defineMessages","heading","id","defaultMessage","subheading","getOrderedLists","createSelector","state","get","lists","toList","filter","item","sort","a","b","localeCompare","Lists","connect","injectIntl","componentWillMount","this","props","dispatch","fetchLists","render","_this$props","intl","shouldUpdateScroll","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","_ui_components_column__WEBPACK_IMPORTED_MODULE_8__","_components_loading_indicator__WEBPACK_IMPORTED_MODULE_7__","emptyMessage","react_intl__WEBPACK_IMPORTED_MODULE_11__","icon","formatMessage","_components_column_back_button_slim__WEBPACK_IMPORTED_MODULE_9__","_components_new_list_form__WEBPACK_IMPORTED_MODULE_15__","_ui_components_column_subheading__WEBPACK_IMPORTED_MODULE_14__","text","_components_scrollable_list__WEBPACK_IMPORTED_MODULE_17__","scrollKey","map","list","_ui_components_column_link__WEBPACK_IMPORTED_MODULE_13__","to","ImmutablePureComponent","params","PropTypes","object","isRequired","func","ImmutablePropTypes"],"mappings":"qTAgBMA,EAAWC,YAAe,CAC9BC,QAAO,CAAAC,GAAA,eAAAC,eAAA,SACPC,WAAU,CAAAF,GAAA,mBAAAC,eAAA,gBAGNE,EAAkBC,YAAe,CAAC,SAAAC,GAAK,OAAIA,EAAMC,IAAI,WAAW,SAAAC,GACpE,OAAKA,EAIEA,EAAMC,SAASC,OAAO,SAAAC,GAAI,QAAMA,IAAMC,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEN,IAAI,SAASQ,cAAcD,EAAEP,IAAI,YAHtFC,IAYLQ,EAFUC,kBAJQ,SAAAX,GAAK,MAAK,CAChCE,MAAOJ,EAAgBE,QAIxBY,2HAUCC,mBAAA,WACEC,KAAKC,MAAMC,SAASC,kBAGtBC,OAAA,WAAU,IAAAC,EACoCL,KAAKC,MAAzCK,EADAD,EACAC,KAAMC,EADNF,EACME,mBAAoBnB,EAD1BiB,EAC0BjB,MAElC,IAAKA,EACH,OACEoB,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,UACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,KAKN,IAAMC,EAAeJ,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAD,CAAkBhC,GAAG,qBAAqBC,eAAe,6EAE9E,OACE0B,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,CAAQI,KAAK,UAAUlC,QAAS0B,EAAKS,cAAcrC,EAASE,eAA5D,EACE4B,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,IAEAR,OAAAC,EAAA,EAAAD,CAACS,EAAA,EAAD,IAEAT,OAAAC,EAAA,EAAAD,CAACU,EAAA,EAAD,CAAkBC,KAAMb,EAAKS,cAAcrC,EAASK,cACpDyB,OAAAC,EAAA,EAAAD,CAACY,EAAA,EAAD,CACEC,UAAU,QACVd,mBAAoBA,EACpBK,aAAcA,QAHhB,EAKGxB,EAAMkC,IAAI,SAAAC,GAAI,OACbf,OAAAC,EAAA,EAAAD,CAACgB,EAAA,EAAD,CAAiCC,GAAE,mBAAqBF,EAAKpC,IAAI,MAAS2B,KAAK,UAAUK,KAAMI,EAAKpC,IAAI,UAAvFoC,EAAKpC,IAAI,eAvClBuC,+BAEC,CACjBC,OAAQC,IAAUC,OAAOC,WACzB5B,SAAU0B,IAAUG,KAAKD,WACzB1C,MAAO4C,IAAmBT,KAC1BjB,KAAMsB,IAAUC,OAAOC","file":"features/lists.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ColumnBackButtonSlim from '../../components/column_back_button_slim';\nimport { fetchLists } from '../../actions/lists';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\nimport NewListForm from './components/new_list_form';\nimport { createSelector } from 'reselect';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.lists', defaultMessage: 'Lists' },\n  subheading: { id: 'lists.subheading', defaultMessage: 'Your lists' },\n});\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  lists: getOrderedLists(state),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Lists extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    lists: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchLists());\n  }\n\n  render () {\n    const { intl, shouldUpdateScroll, lists } = this.props;\n\n    if (!lists) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.lists' defaultMessage=\"You don't have any lists yet. When you create one, it will show up here.\" />;\n\n    return (\n      <Column icon='list-ul' heading={intl.formatMessage(messages.heading)}>\n        <ColumnBackButtonSlim />\n\n        <NewListForm />\n\n        <ColumnSubheading text={intl.formatMessage(messages.subheading)} />\n        <ScrollableList\n          scrollKey='lists'\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n        >\n          {lists.map(list =>\n            <ColumnLink key={list.get('id')} to={`/timelines/list/${list.get('id')}`} icon='list-ul' text={list.get('title')} />\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}